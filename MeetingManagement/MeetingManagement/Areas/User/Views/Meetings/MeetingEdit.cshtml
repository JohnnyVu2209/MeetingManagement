@model MeetingManagement.Models.MEETING
@using MeetingManagement.Models;
@{
    ViewBag.Title = "Chi tiết cuộc hop";
    var Date = DateTime.Now.ToShortDateString();
    var newMeet = ViewBag.newMeet as MEETING;
    var userList = ViewBag.userList as List<string>;
    var db = new SEP24Team7Entities();
    var m = new List<AspNetUser>();
}
<style>
    .edit_fixed {
        padding-left: 5px;
        width: 100%;
        max-width: none;
        border: 0px;
        height: 30px;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }

    .autocomplete {
        position: relative;
        display: inline-block;
    }

    input {
        border: 1px solid transparent;
        background-color: #f1f1f1;
        padding: 10px;
        font-size: 16px;
    }

        input[type=text] {
            background-color: #f1f1f1;
            width: 100%;
        }

        input[type=submit] {
            background-color: DodgerBlue;
            color: #fff;
            cursor: pointer;
        }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 15px;
        right: 0;
        width: 295px;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            /*when hovering an item:*/
            .autocomplete-items div:hover {
                background-color: #e9e9e9;
            }

    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>
<div>
    @*<p>@Date - @Model.Date_Start </p>
        <p>@Time - @Model.Time_Start </p>*@

    <ul class="progressbar" style="border: 2px solid #e5e5e5; padding: 10px; ">
        @if (Model.Status == 1)
        {
            <li class="active">Tạo cuộc họp</li>
            <li>Duyệt</li>
            <li>Đã họp</li>
            <li>Biên bản họp</li>
            <li>Hoàn thành</li>
        }
        else if (Model.Status == 2)
        {
            <li class="complete">Tạo cuộc họp</li>
            <li class="active">Duyệt</li>
            <li>Đã họp</li>
            <li>Biên bản họp</li>
            <li>Hoàn thành</li>
        }
        else if (Model.Status == 3)
        {
            <li class="complete">Tạo cuộc họp</li>
            <li class="complete">Duyệt</li>
            <li class="active">Đã họp</li>
            <li>Biên bản họp</li>
            <li>Hoàn thành</li>
        }
        else if (Model.Status == 4)
        {
            <li class="complete">Tạo cuộc họp</li>
            <li class="complete">Duyệt</li>
            <li class="complete">Đã họp</li>
            <li class="active">Biên bản họp</li>
            <li>Hoàn thành</li>
        }
        else if (Model.Status == 5)
        {
            <li class="complete">Tạo cuộc họp</li>
            <li class="complete">Duyệt</li>
            <li class="complete">Đã họp</li>
            <li class="complete">Biên bản họp</li>
            <li class="active">Hoàn thành</li>
        }
        else if (Model.Status == 7)
        {
            <li class="warning">
                <div onclick="alert(@Model.Feedback)" style="cursor: pointer; height: 60px; width: fit-content; position: relative; display: flex; bottom: 40px; align-items: flex-end; margin: 0 auto; }">
                    Đã hủy
                </div>
            </li>
        }
        else if (Model.Status == 6)
        {
            <li class="warning">Không được duyệt</li>
        }
    </ul>
</div>
<div style="border: 2px solid #e5e5e5; padding: 20px; width: 1000px; overflow: overlay;">
    <div class="form-row-fixed">
        @*<img src="~/Content/Picture/outline_file_upload_black_24dp.png" />*@
        @*<label class="icon-zone" for="input-ficons-1"><i class="fa fa-plus"></i></label>*@
        @if (Model.ATTACHMENTs.Count != 0)
        {
            foreach (var item in Model.ATTACHMENTs)
            {
                <a id="myfile" href="@item.Attachment_path" style="margin-right:20px;" download>
                    <div style="width:200px; height:50px; cursor:pointer; background-color:white; outline:1px solid #e5e5e5; display:inline-flex">
                        <div style="width: 25%; height: 100%; display: flex; justify-content: center; align-items: center;">
                            @if (@item.Attachment_type == "xls" || item.Attachment_type == "xlsm" || item.Attachment_type == "xlsx")
                            {
                                <i style="font-size: 40px; color: #1d6f42;" class="fas fa-file-excel text-primary"></i>
                            }
                            else if (@item.Attachment_type == "pdf")
                            {
                                <i style="font-size: 40px; color: #f40f02;" class="fas fa-file-pdf text-primary"></i>
                            }
                            else if (@item.Attachment_type == "doc" || item.Attachment_type == "docm" || item.Attachment_type == "docx")
                            {
                                <i style="font-size:40px" class="fas fa-file-word text-primary"></i>
                            }
                            else if (@item.Attachment_type == "jpg" || item.Attachment_type == "jpeg")
                            {
                                <i style="font-size: 40px; color: #34a4eb; " class="fas fa-file-image text-primary"></i>
                            }
                            else if (@item.Attachment_type == "ppt" || item.Attachment_type == "pptm" || item.Attachment_type == "pptx")
                            {
                                <i style="font-size: 40px; color: #D04423" class="fas fa-file-powerpoint text-primary"></i>
                            }
                            else
                            {
                                <i style="font-size:40px; color:gray" class="fas fa-file text-primary"></i>
                            }
                        </div>
                        <div style="width:75%; padding:0 5px; color:black">
                            <p style="text-overflow: ellipsis; overflow: hidden; width: 140px; height: 20px; white-space: nowrap; ">
                                @item.Attachment_name
                            </p>
                            <p style="font-size:10px">
                                @item.Attachment_binary
                            </p>
                        </div>
                    </div>
                </a>
                <div style="position:relative;cursor:pointer; font-size:20px; right:32px" onclick="ShowDeletePopUp(@item.Attachment_id)">x</div>
            }
        }
    </div>
</div>
@using (Html.BeginForm("MeetingEdit", "Meetings", FormMethod.Post, new { id = "__AjaxAntiForgeryForm", enctype = "multipart/form-data" }))
{
    <input style=" position: relative; left: 620px; height: auto;" type="file" name="fileBase" id="ReportFile" class="form-control" accept=".zip,.pdf,.doc,.docx,.xml,application/msword" />
    <script type="text/javascript">
        $(() => {
            $('#ReportFile').on("change", function () {
                var fileUpload = document.getElementById("ReportFile");
                $('#ReportName').val(fileUpload.files[0].name);
            });
        });
    </script>
    <div class="value-fixed" style="height:10px;">
        <div class="space"></div>
    </div>
    @Html.HiddenFor(model => model.Category_id)
    @Html.HiddenFor(model => model.Meeting_id, new { @id = "meeting_id" })
    @Html.HiddenFor(model => model.AspNetUser)
    foreach (var user in userList)
    {
        @Html.Hidden("user", user);
    }
    <div style=" width: 1000px; border: 2px solid #e5e5e5; padding: 10px;">
        <div class="form-row-fixed form-row-fixed-title" style="width:100%;">
            <img src="~/Content/Picture/outline_title_black_24dp.png" />
            <div class="value value-fixed">
                <div class="input-group input_fixed value-fixed-title" style="width: 800px !important;">
                    @Html.TextBoxFor(model => model.Meeting_name, new { @class = "edit_fixed", @id = "meeting_name_val" })
                </div>
            </div>
        </div>
        <div class="form-row-fixed form-row-fixed-title" style="width:100%;">
            <img src="~/Content/Picture/outline_manage_accounts_black_24dp.png" />
            <div class="value value-fixed">
                <div class="input-group input_fixed value-fixed-title" style="width: 800px !important; background-color: #f1f1f1; padding-left: 5px; height: 30px; display: flex; align-items: center;">
                    @Html.DisplayFor(model => model.AspNetUser.Email, new { @class = "input-fixed", @id = "Create_by" })
                </div>
            </div>
        </div>
        <div class="form-row-fixed datetime-inline">
            <img src="~/Content/Picture/outline_event_black_24dp.png" />
            <div class="value value-fixed value-fixed-location">
                <div class="input-group input_fixed">
                    <div class="input-group-desc" style="display: flex; height: 100%; width: 100%;">
                        @Html.TextBoxFor(model => model.Date_Start, "{0:yyyy-MM-dd}", new { @class = "input--style-5-fixed", @type = "date", @id = "date_start_val", @style = "width: 100%; border:0px; padding-left: 5px;height: 30px;" })
                    </div>
                </div>
            </div>
        </div>
        <!--
        -->
        <div class="form-row-fixed datetime-inline">
            <img src="~/Content/Picture/outline_schedule_black_24dp.png" />
            <div class="value value-fixed value-fixed-location">
                <div class="input-group input_fixed">
                    <div class="input-group-desc" style="display: flex; height: 100%; width: 100%;">
                        @Html.TextBoxFor(model => model.Time_Start, new { @class = "input-fixed", @type = "time", @id = "time_start_val", @style = "width: 100%; border:0px; padding-left: 5px;height: 30px;" })
                    </div>
                </div>
            </div>

        </div>
        <!--
        -->
        <div class="form-row-fixed datetime-inline" style="width:100%;">
            <img src="~/Content/Picture/outline_place_black_24dp.png" />
            <div class="value value-fixed value-fixed-location">
                <div class="input-group input_fixed" style="width:800px">
                    <div class="input-group-desc" style="display: flex; height: 100%; width: 100%;">
                        @Html.TextBoxFor(model => model.Location, new { @class = "edit_fixed", @id = "location_val" })
                    </div>
                </div>
            </div>
        </div>
        <div class="form-row-fixed" style="align-items: flex-start !important; width: 100%; margin-top: 20px !important; ">
            <img src="~/Content/Picture/outline_edit_black_24dp.png" />
            <div class="value value-fixed" style="width: 966px; min-height: 200px; border: 0px;">
                <div class="input-group" style="height: 300px; width: 100%; background: white; white-space: pre-line;">
                    @*@Html.Label(Model.Meeting_content, new { @class = "area-input", @rows = "20" })*@
                    @Html.TextAreaFor(model => model.Meeting_content, new { @class = "input-fixed", @style = "width:100%; height: 100%;padding-left: 5px;", @id = "content_val" })
                </div>
            </div>
        </div>
        <div class="form-row-fixed" style="margin-bottom:20px;">
            <div class="col-sm-1" style="width:fit-content;padding-left:0;">
                <img src="~/Content/Picture/outline_people_black_24dp.png" />
            </div>
            <div class="col-md-6 autocomplete">
                <input type="text" style="width:max-content" class="form-control " id="myInput" autocomplete="off" />
            </div>
            <div class="col-md-4" style="margin-left:10px;">
                <button type="button" style="color: white; margin-left: 10px;" data-toggle="modal" onclick="getCreateModal()" class="btn yuki-btn-blue">
                    Thêm
                </button>
            </div>
        </div>

        @Html.HiddenFor(model => model.Create_by)
        @Html.HiddenFor(model => model.Date_Create)
        @Html.HiddenFor(model => model.Status, new { id = "status_val" })
        @Html.HiddenFor(model => model.MEETING_STATUS)
        @Html.Hidden("model_type", 2)
        @Html.HiddenFor(model => model.MEMBERs)
        @if (Model.MEMBERs.Count != 0)
        {

            foreach (var member in Model.MEMBERs)
            {
                var u = db.AspNetUsers.SingleOrDefault(x => x.Id == member.Member_id);
                m.Add(u);
            }

            <div class="form-row-fixed" style="padding-left: 50px; width: 65%;">
                <table class="table" style="width:100%;">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Email</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var pick in m)
                        {
                            <tr>
                                <td><a href="@Url.Action("RemoveEditUser", "Meetings",new { userId = pick.Id})" style="color:red;width:100%;height:100%;"><i class="fa fa-minus-circle fa-lg" aria-hidden="true"></i></a> </td>
                                <td>@pick.Email</td>
                            </tr>
                        }
                    </tbody>

                </table>
            </div>
        }
        <div style=" width: 966px; display: flex; justify-content: center;">
            <button type="submit" style="border:0px; width: 100px; height: 40px; background-color: #009fe5; color: white; display: inline-flex; align-items: center; justify-content: center; border-radius: 5px; cursor:pointer">
                Lưu
            </button>
            <a id="cancel-btn" onclick="location.href = '@Url.Action("Index", "Meetings")'" style="width: 100px; height: 40px; background-color: #f1f1f1; color: black; display:inline-flex; align-items: center; justify-content: center; border-radius: 5px; cursor: pointer ">
                Hủy
            </a>

        </div>
    </div>
    @*<div style="width: 300px; height: 100%; background-color: wheat; position: absolute; top: -50px; right: 0px;">

        </div>*@
}
<div id="show-popup"></div>
<div id="Feedback"></div>


<style>
    .btn_catalog {
        min-width: 142px;
        height: 36px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
    }

    .btn--delete {
        background: #e74c3c;
        font-family: Mulish;
        font-style: normal;
        font-weight: 600;
        font-size: 14px;
        line-height: 18px;
        text-align: center;
        color: #FFFFFF;
        margin-right: 8px;
    }



    .btn-primary-fixed {
        color: #fff;
        background-color: #009fe5;
        /* border-color: #2e6da4; */
        position: relative;
        left: 0px;
        width: 1000px;
        border-radius: 4px 4px 0px 0px;
    }

    .space {
        width: 966px;
    }

    .file-zone {
        margin-left: 34px;
        width: 300px;
        height: 50px;
    }

    .area-input {
        height: fit-content;
        min-height: 250px;
        padding: 5px;
    }

    #cancel-btn:hover {
        text-decoration: none;
    }
</style>


<script>
        function getCreateModal() {
            var email = $('#myInput').val();
            if (email.length == 0) {
                alert("Chưa nhập email");
            }
            else {
                $.ajax({
                    url: "@Url.Action("AddEditUser", "Meetings")",
                    datatype: 'html',
                    method: 'GET',
                    data: $('form').serialize() + '&email=' + email,
                    success: function (data) {
                        location.reload();
                        $('#myInput').val('');
                    },
                    error: function (err) {
                        console.log(err);
                    }
                });
            }

        };
        function getCancelModel() {
            var model = $("#__AjaxAntiForgeryForm").serialize();
            //var meeting_location = document.getElementById("location_val").value;
            //var meeting_content = document.getElementById("content_val").value;
        $.ajax({
            url: '@Url.Action("CancelModel", "Meetings")',
            method: 'GET',
            data: model,
            success: function (data) {
            $("#Feedback").html(data);
            $("#modalFeedback").appendTo("body").modal("show");
            },
        error: function (err) {
            console.log(err);
        }
    })
    }
        function ShowDeletePopUp(id) {
        $.ajax({
            type: "GET",
            url: '@Url.Action("DeleteAttachment", "Meetings")',
            data: { id },
            dataType: "html",
            success: function (data) {
                $("#show-popup").html(data);
                $("#myDeleteModal").appendTo("body").modal("show");
            },
            error: function (data) {
                return false;
            }
        });
    };

    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
    var all = $("input[name='user']").map(function () {
        return this.value
    }).get();


    /*An array containing all the country names in the world:*/
    var countries = all

    /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
    autocomplete(document.getElementById("myInput"), countries);
</script>
@*<script type="text/javascript">
    function Edit() {
        var meeting_id = $("#Meeting_id").val();
        var meeting_name = $("#meeting_name").val();
        var date_start = $("#date_start").val();
        var time_start = $("#Time_Start").val();
        var location = $("#Location").val();
        var meet_content = $("#hrere_content").val();
        alert(meet_content);
        $.ajax({
            url: '@Url.Action("MeetingEdit", "Meetings")',
            method: 'POST',
            data: (meeting_id, meeting_name, meet_content, date_start , time_start, location),
            success: function (data) {
            window.location.href = '@Url.Action("MeetingDetail", "Meetings", new { id = Model.Meeting_id, modify = false }) ' },
            error: function (err) {
                console.log(err);
            }
        })
        }
    </script>*@
@*<script>
        function file_hidden(id)
        {
            var file = document.getElementsByClassName("myfile-" + id);
            var x = document.getElementsByClassName("x-" + id);
            $(file).addClass('hidden');
            $(x).addClass('hidden');
        }
    </script>
    <style>
        .hidden {
            display:none;
        }
    </style>*@
