@model MeetingManagement.Models.MEETING
@using MeetingManagement.Models;
@{
    ViewBag.Title = "Tạo cuộc họp";
    var newMeet = ViewBag.newMeet as MEETING;
    var userList = ViewBag.userList as List<string>;
    var db = new SEP24Team7Entities();
    var m = new List<AspNetUser>();
}


<!-- Icons font CSS-->

<link href="~/Content/taocuochop/vendor/font-awesome-4.7/css/font-awesome.min.css" rel="stylesheet" />
<link href="~/Content/taocuochop/vendor/font-awesome-4.7/css/font-awesome.css" rel="stylesheet" />

<!-- Font special for pages-->
<link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i,800,800i" rel="stylesheet">
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<!-- Vendor CSS-->

<link href="~/Content/taocuochop/vendor/select2/select2.min.css" rel="stylesheet" />

<link href="~/Content/taocuochop/vendor/datepicker/daterangepicker.css" rel="stylesheet" />
<!-- Main CSS-->

<link href="~/Content//taocuochop/css/main.css" rel="stylesheet" />

@*override site.css*@
<style>
    input {
        max-width: none;
    }

    textarea {
        max-width: none;
    }

    .col-2 {
        width: 150px;
        display: inline-block;
    }

    .col-500 {
        width: 500px;
        display: inline-block;
        position: absolute;
    }
</style>

@*override button.less*@
<style>
    .inline-datetime {
        display: inline-flex;
    }

    .inline-location {
        margin-left: 50px;
        position: absolute;
        display: inline-block;
        width: 600px;
        height: 40px;
    }

    .button-zone {
        display: inline-block;
        position: absolute;
        right: 30px;
        margin: 3px 0px;
    }

    .lable-zone {
        display: inline-block;
        position: absolute;
        left: 80px;
        color: black;
        line-height: 40px;
    }

        .lable-zone label {
            font-size: 18px !important;
        }

    .body-navbar {
        width: calc(100% - 150px);
        height: 60px;
        background: white;
        border-bottom: 1px solid #f1f1f1;
        z-index: 10;
        position: fixed;
        color: white;
        top: 50px;
        left: 150px;
    }

    .nav-content-zone {
        position: relative;
        top: 10px;
        left: 20px;
    }

    .body-navbar div img {
        width: 40px;
        height: 40px;
        padding: 2px;
        border: 1px solid grey;
        border-radius: 10px;
        position: absolute;
        left: 30px;
    }

    .card-body-fixed {
        position: relative;
        top: 50px;
        width: 1300px;
        height: 800px;
        z-index: 1;
    }

    .yuki-card-footer {
        text-align: center;
        padding-bottom: 20px;
    }

    .btn-fixed {
        color: white;
        font-size: 14px;
        display: inline-block;
        width: 8em;
        height: 4em;
        text-align: center;
        border-radius: 4px;
    }

    .yuki-btn-blue {
        background-color: #009FE5 !important;
    }

    .yuki-btn-gray {
        background-color: #808080 !important;
    }

        .yuki-btn-gray:hover {
        }
</style>
<style>
    textarea:focus {
        outline: 0px !important;
        border: 2px solid #009fe5 !important;
    }
</style>
<style>
    .back-button {
        font-family: Mulish;
        background: #009FE5;
        color: white;
        width: 150px;
        height: 50px;
        border-radius: 10px;
    }

    .card-heading-fixed {
        background: #009FE5 !important;
    }
</style>
<style>
    .datetime-inline {
        width: 500px;
        display: inline-flex;
        align-items: center;
    }

    .input--style-5-fixed {
        background: #f1f1f1;
        height: 40px;
        line-height: 40px;
        border: 2px solid white;
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
        padding: 0 22px;
        color: #555;
    }

    .value-fixed-title {
        width: calc(1000px - 34px) !important;
    }

    .value-fixed-location {
        width: calc(100% - 34px) !important
    }

    .value-fixed {
        margin-left: 10px;
    }

    .form-row-fixed {
        margin: 0 0 15px 0;
    }

    .form-row-fixed-title {
        width: calc(1000px - 34px);
    }

    .form-row img {
        height: 24px;
        opacity: 0.7;
        display: inline-block;
        width: 24px;
    }

    .area-input {
        margin: 0px;
        width: calc(1000px - 34px);
        height: 250px;
        border: 2px solid white;
    }

    .input_fixed {
        width: 100%;
        height: 30px;
    }

    .row-space-fixed:after {
        content: none;
    }

    .row-space-fixed:before {
        content: none;
    }

    .row-space-fixed {
        margin: 0px;
    }

    .input-new:focus {
        border: 2px solid #009fe5;
    }

    .input--style-5-fixed:focus {
        border: 2px solid #009fe5;
    }

    .input-margin {
        margin-left: 50px;
    }
    /*    .body-content {
        background-image: url("https://img.wallpapersafari.com/desktop/1920/1080/51/78/dltnIv.jpg");
    }*/
    .autocomplete {
        position: relative;
        display: inline-block;
    }

    input {
        border: 1px solid transparent;
        background-color: #f1f1f1;
        padding: 10px;
        font-size: 16px;
    }

        input[type=text] {
            background-color: #f1f1f1;
            width: 100%;
        }

        input[type=submit] {
            background-color: DodgerBlue;
            color: #fff;
            cursor: pointer;
        }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 15px;
        right: 0;
        width: 295px;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            /*when hovering an item:*/
            .autocomplete-items div:hover {
                background-color: #e9e9e9;
            }

    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>




<div class="body-navbar">
    @*<button type="button" onclick="window.location.href='@Url.Action("Index", "MainPage")'" class="btn yuki-btn-blue>
        ❮   Back to List
        </button>*@
    <div class="nav-content-zone">
        <img src="~/Content/Picture/users_meeting.png" />
        <div class="lable-zone">
            New Meeting
        </div>
    </div>

</div>
@using (Html.BeginForm("MeetingForm", "Meetings", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
<div class="card-body card-body-fixed">

    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Category_id, new { @id = "category_id" })
    @foreach (var user in userList)
    {
        @Html.Hidden("user", user);
    }
    <div class="form-row form-row-fixed form-row-fixed-title">
        <div>
            <img src="~/Content/Picture/outline_title_black_24dp.png" />
        </div>
        <div class="value value-fixed">
            <div class="input-group input_fixed value-fixed-title">
                @Html.TextBoxFor(model => model.Meeting_name, new { @class = "input--style-5-fixed", @id = "meeting_name" })
                @Html.ValidationMessageFor(model => model.Meeting_name, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-row form-row-fixed datetime-inline">
        <img src="~/Content/Picture/outline_schedule_black_24dp.png" />
        <div class="value value-fixed" style="width: calc(100% - 34px);height:40px;">
            <div class="row inline-datetime">
                <div class="col-md-2" style="width:50%;">
                    <div class="input-group-desc">
                        @Html.TextBoxFor(model => model.Date_Start, new { @class = "input--style-5-fixed", @type = "date" })
                        @Html.ValidationMessageFor(model => model.Date_Start, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-2" style="width:50%;">
                    <div class="input-group-desc">
                        @Html.TextBoxFor(model => model.Time_Start, new { @class = "input--style-5-fixed", @type = "time" })
                        @Html.ValidationMessageFor(model => model.Time_Start, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--
    -->
    <div class="form-row form-row-fixed datetime-inline">
        <img src="~/Content/Picture/outline_place_black_24dp.png" />
        <div class="value value-fixed value-fixed-location">
            <div style="width:100%">
                <div class="input-group input_fixed">
                    @Html.TextBoxFor(model => model.Location, new { @class = "input--style-5-fixed", @id = "location" })
                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="form-row form-row-fixed">
        <div> <img src="~/Content/Picture/outline_edit_black_24dp.png" /></div>
        <div class="value value-fixed">
            <div class="input-group input_fixed">
                @Html.TextAreaFor(model => model.Meeting_content, new { @class = "input--style-5-fixed area-input", @rows = "5", @id = "content" })
            </div>
        </div>
    </div>
    <div class="form-row" style="margin-bottom:20px;">
        <div class="col-sm-1" style="width:fit-content;padding-left:0;">
            <img src="~/Content/Picture/outline_people_black_24dp.png" />
        </div>
        <div class="col-md-2" style="width:fit-content;">
            <p style="padding-top:10px;">Người tham dự</p>
        </div>
        <div class="col-md-3 autocomplete">
            <input type="text" class="form-control " id="myInput" autocomplete="off" />
        </div>
        <div style="margin-left:10px;">
            <div style="display: flex;">
                <button type="button" style="color: white; margin-left: 10px;" data-toggle="modal" onclick="getCreateModal()" class="btn yuki-btn-blue">
                    <p>
                        Thêm
                    </p>
                </button>

            </div>
        </div>
    </div>
    @if (Model.MEMBERs.Count != 0)
    {

        foreach (var member in Model.MEMBERs)
        {
            var u = db.AspNetUsers.SingleOrDefault(x => x.Id == member.Member_id);
            m.Add(u);
        }

        <div class="form-row" style="padding-left:50px;">
            <table class="table" style="width:40%;">
                <thead>
                    <tr>
                        <th>Email</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pick in m)
                    {
                        <tr>
                            <td>@pick.Email</td>
                            <td><a href="@Url.Action("RemoveUser", "Meetings",new { userId = pick.Id})" style="color:red;width:100%;height:100%;"><i class="fa fa-minus-circle fa-lg" aria-hidden="true"></i></a> </td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    }


    <div class="form-row">
        <input style="width: fit-content; margin-right: 10px;" type="checkbox" class="btn btn-info" data-toggle="collapse" data-target="#demo" value="Simple collapsible" />
        <div>
            <div style="display: inline-flex; align-items: center; position: relative; left: 10px; ">
                <p>Người ngoài trường</p>
                <div style="margin-left: 20px;" id="demo" class="collapse">
                    <button style="color:white" onclick="" class="btn yuki-btn-blue">
                        <p>
                            Thêm
                        </p>
                    </button>
                </div>
            </div>

        </div>
    </div>
    <div class="form-row">
        <div class="name">Tài Liệu Đính Kèm:</div>
        <div>
            <div class="form-group">
                <input type="file" class="form-control-file border" multiple id="file" name="Files" accept=".doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document">
            </div>
        </div>
    </div>
    <div id="Popup"></div>

</div>
    <div>
        <button type="submit" style="position:relative; z-index:2;" class="btn btn--blue btn-lg btn-block">Tạo</button>
    </div>
}



<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script type="text/javascript">
    $(() => {
        if (performance.navigation.type == performance.navigation.TYPE_RELOAD) {
            sessionStorage.clear();
        }
    });
    function getCreateModal() {
        var email = $('#myInput').val();
        if (email.length == 0) {
            alert("Chưa nhập email");
        }
        else {
            $.ajax({
                url: "@Url.Action("AddUser", "Meetings")",
                datatype: 'html',
                method: 'GET',
                data: $('form').serialize() + '&email=' + email,
                success: function (data) {
                    location.reload();
                    $('#myInput').val('');
                },
                error: function (err) {
                    console.log(err);
                }
            });
        }

    };
    function getCreateModal2() {
        $.ajax({
            url: "CreateUser2",
            datatype: 'html',
            method: 'GET',
            data: {},
            success: function (data) {
                $("#Popup2").html(data);

                $("#modalCreate2").modal("show");
            },
            error: function (err) {
                console.log(err);
            }
        });
    }
    ;
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
    var all = $("input[name='user']").map(function () {
        return this.value
    }).get();


    /*An array containing all the country names in the world:*/
    var countries = all

    /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
    autocomplete(document.getElementById("myInput"), countries);
</script>